            ///
            //
            // Conway's Life for the PDP-8.
            //
            // Algorithm adapted from Chapter 17 of "Graphics Programming Black Book" By 
            // http://www.gamedev.net/page/resources/_/technical/graphics-programming-and
            // (See Listing 17.5)
            //
            // If the Switch Register is all 0's on startup,
            // a hard-coded "glider" test pattern is loaded into the grid.
            // Otherwise, the Switch Register value is used as a pseudo-random seed
            // to generate the starting pattern.
            ///
            //
            // Assembly-time Constants.
            //
            // Grid Size.
            //
            // Grid dimensions for emulator "Run PDP-8 Screen".
            numRows=15d
            numCols=77d
            numCells=1155d
            // Grid dimensions for use with PDP-8 emulator debug memory display.
            //numRows=12d
            //numCols=8d
            //numCells=96d
            // Grid dimensions to maximize use of VT-100 terminal in PDP-8/E Java Emulato
            //numRows=22d
            //numCols=80d
            //numCells=1760d // 22 rows by 80 cols. Word per cell implies 14 pages of 128
            //
            numColP1=numCols+1
            numColM1=numCols-1
            numCellM1=numCells-1
            //
            incrNbrCount=0100 // Increment neighber count in high half word.
            decrNbrCount=-incrNbrCount // Decrement neighber count in high half word.
            //
            // ASCII Character Codes.
            //
            asciiEsc=27d // Escape
            asciiSpace=32d // Space (Blank)
            asciiCR=13d // Carriage Return
            asciiLF=10d // Line Feed
            //
            ///
            //
            // Page 0 is always directly-addressable.
            //
            // Auto-Index "Register" addresses.
            //
            air0=10
            air1=11
            air2=12
            air3=13
            air4=14
            air5=15
            air6=16
            air7=17
            //
            ///
            //
            *0020
            //
            // Bit Masks.
            //
0020/0017   mNbrCount, 0017 // Right 4 bits to store 0 thru 8 as Neighbor Count.
0021/0020   mCellOnLo, 0020 // Cell marked "on" in lo half (5th bit from right).
0022/2000   mCellOnHi, 2000 // Cell marked "on" in hi half.
0023/5777   mCellOffHi, 5777 // Clear "on" bit in hi half.
0024/0077   mLoHalf, 0077 // Right 6 bits.
0025/7700   mHiHalf, 7700 // Left 6 bits.
0026/0017   mRandBits, 0017 // Right 4 bits for random # (0 to 15).
0027/0007   mLoOctalDigit, 0007 // Right-most octal digit.
            //
            // Memory Constants.
            //
0030/7777   cMinusOne, -1
0031/7776   cMinusTwo, -2
0032/7775   cMinusThree, -3
0033/0115   cNumCols, numCols
0034/2203   cNumCells, numCells
            //
            // String and Character Constants.
            //
0035/0035   szClrScreen, . // VT-100 Clear Screen.
0036/0033     asciiEsc;'[2J'
0037/0133
0040/0062
0041/0112
0042/0000     0
0043/0043   szCrsrHome, . // VT-100 Cursor Home.
0044/0033     asciiEsc;'[0;0H'
0045/0133
0046/0060
0047/0073
0050/0060
0051/0110
0052/0000     0
0053/0053   szSeed, . // Random seed display message.
0054/0123     'Seed: '
0055/0145
0056/0145
0057/0144
0060/0072
0061/0040
0062/0000     0
0063/0063   szGeneration, . // Generation display message.
0064/0040     '  Generation: '
0065/0040
0066/0107
0067/0145
0070/0156
0071/0145
0072/0162
0073/0141
0074/0164
0075/0151
0076/0157
0077/0156
0100/0072
0101/0040
0102/0000     0
0103/0103   szNewLine, . // Carriage-Return/Line-Feed combination.
0104/0015     asciiCR;asciiLF
0105/0012
0106/0000     0
0107/0040   charSpace, asciiSpace
0110/0060   charZero, '0'
0111/0052   charStar, '*'
            //
            // Neighbor Cell Offsets.
            //
0112/0112   cellOffsets, . // Base address to load into auto-index register.
0113/7662   coNW, -numColP1
0114/7663   coN, -numCols
0115/7664   coNE, -numColM1
0116/0001   coE, +1
0117/0116   coSE, numColP1
0120/0115   coS, numCols
0121/0114   coSW, numColM1
0122/7777   coW, -1
0123/0000   coSelf, 0 // Terminate loop.
            //
            // Array Pointers.
            //
0124/2007   pNWWrapCell, NWWrapCell // Extra "northwest" wrap cell.
0125/2007   pTopWrapRow, CellBuffer-1 // Preceding address for auto-indexing to top wrap 
0126/2124   pGridCells, CellBuffer+numColM1 // Preceding address for actual cell grid (af
0127/4327   pBotWrapRow, CellBuffer+numCols+numCellM1 // Preceding address for bottom wra
0130/4445   pSEWrapCell, CellBuffer+numCols+numCells+numCols // Extra "southeast" wrap ce
            //
0131/4212   pNWPairCell, NWWrapCell+numCells // Pair for "northwest" wrap cell (just befo
0132/4212   pTopPairRow, CellBuffer+numCellM1 // Preceding address for pair for top wrap 
0133/2124   pBotPairRow, CellBuffer+numColM1 // Preceding address for pair for bottom wra
0134/2242   pSEPairCell, CellBuffer+numCols+numCols // Pair for "southwest" wrap cell (ju
            //
            // Subroutine Pointers.
            //
0135/1200   SkipIfChar, srSkipIfChar
0136/1206   GetChar, srGetChar
0137/1213   PutChar, srPutChar
0140/1221   PutString, srPutString
0141/1230   PutNewLine, srPutNewLine
0142/1235   PutOctal, srPutOctal
0143/1302   SetRand, srSetRand
0144/1305   GetRand, srGetRand
0145/1320   EmuMUY, srEmuMUY
0146/0405   ClrGeneration, srClrGeneration
0147/0400   LoadSeed, srLoadSeed
0150/0413   ShowSeedAndGeneration, srShowSeedAndGeneration
0151/0433   ClrWrap, srClrWrap
0152/0454   ClrGrid, srClrGrid
0153/0535   RandomizeGrid, srRandomizeGrid
0154/0467   InitGrid, srInitGrid
0155/0600   ShowGrid, srShowGrid
0156/0644   ProcessGeneration, srProcessGeneration
0157/1045   CloneGrid, srCloneGrid
0160/1066   CloneCell, srCloneCell
0161/0723   CellBorn, srCellBorn
0162/0737   CellDied, srCellDied
0163/0751   CellNeighbors, srCellNeighbors
0164/1000   ProcWrap, srProcWrap
            //
            // Global Variables.
            //
0165/0000   gGeneration, 0
0166/0000   gSeed, 0
            //
            ///
            //
            // Main Code Page.
            //
            *0200
0200/7300   Main, cla cll // Clear AC and Link.
0201/6046     tls / Wake Up Printer 
0202/4547     jms i LoadSeed
0203/4546     jms i ClrGeneration  
0204/4550     jms i ShowSeedAndGeneration
0205/4551     jms i ClrWrap
0206/4552     jms i ClrGrid
0207/4554     jms i InitGrid 
0210/4557     jms i CloneGrid
0211/4555     jms i ShowGrid
0212/4556   MainLoop, jms i ProcessGeneration
0213/4557     jms i CloneGrid
0214/4555     jms i ShowGrid
0215/4535     jms i SkipIfChar
0216/5212     jmp MainLoop
0217/7402   MainPause, hlt // Halt.
0220/5212     jmp MainLoop // Resume loop if user continues via front-panel.
0221/7300   End, cla cll // Clear AC and Link.
0222/7402     hlt // Halt.
0223/5200     jmp Main // Restart if user continues via front panel.
            //
            // Application Subroutines.
            //
            *0400
            //
            // Subroutine: Load Seed from Switch Register.
            // Parameter: Switch Register.
            // Updates: Global value gSeed.
            //
0400/0000   srLoadSeed, 0
0401/7300     cla cll
0402/7404     osr // Or the Switch Register bits into AC.
0403/3166     dca gSeed // Save random seed.
0404/5600     jmp i srLoadSeed // Return
            //
            // Subroutine: Clear Generation.
            // No parameter.
            // Updates: Global value gGeneration.
            //
0405/0000   srClrGeneration, 0
0406/7300     cla cll
0407/3165     dca gGeneration
0410/1035     tad szClrScrn
0411/4540     jms i PutString
0412/5605     jmp i srClrGeneration // Return
            //
            // Subroutine: Show Seed.
            // Global value: gSeed.
            // No parameter.
            //
0413/0000   srShowSeedAndGeneration, 0
0414/7300     cla cll
0415/1043     tad szCrsrHome
0416/4540     jms i PutString
0417/1053     tad szSeed
0420/4540     jms i PutString
0421/7300     cla cll
0422/1166     tad gSeed
0423/4542     jms i PutOctal 
0424/1063     tad szGeneration
0425/4540     jms i PutString
0426/7300     cla cll
0427/1165     tad gGeneration
0430/4542     jms i PutOctal 
0431/4541     jms i PutNewLine
0432/5613     jmp i srShowSeedAndGeneration // Return.
            //
            // Subroutine: Clear Wrap rows and cells.
            // No parameter.
            // Registers: air1 air2
            //  
0433/0000   srClrWrap, 0
0434/7300     cla cll
0435/3524     dca i pNWWrapCell // Clear corner wrap cells.
0436/3530     dca i pSEWrapCell
0437/1033     tad cNumCols // Clear top and bottom wrap rows.
0440/7041     cia // Negate.
0441/3253     dca CWLoopCount
0442/1125     tad pTopWrapRow // Load address of top wrap row.
0443/3011     dca air1 // Set 1st index register to loop thru top wrap row.
0444/1127     tad pBotWrapRow // Load address of bottom wrap row.
0445/3012     dca air2 // Set 2nd index register to loop thru bottom wrap row.
0446/3411   CWWrapLoop, dca i air1 // Clear indirectly-indexed cells.
0447/3412     dca i air2
0450/2253     isz CWLoopCount
0451/5246       jmp CWWrapLoop // Non-zero counter, keep looping.
0452/5633     jmp i srClrWrap // Else, done looping so return.
0453/0000   CWLoopCount, 0
            //
            // Subroutine: Clear Grid cells.
            // No parameter.
            // Registers: air0
            //
0454/3266   srClrGrid, dca CGLoopCount
0455/1034     tad cNumCells
0456/7041     cia // Negate
0457/3266     dca CGLoopCount
0460/1126     tad pGridCells // Load address of grid cells.
0461/3010     dca air0 // Set index register to loop thru grid cell array.
0462/3410   CGGridLoop, dca i air0 // Clear next grid cell.
0463/2266     isz CGLoopCount
0464/5262       jmp CGGridLoop // Non-zero counter, keep looping.
0465/5654     jmp i srClrGrid // Else, done looping so return.
0466/0000   CGLoopCount, 0
            //
            // Subroutine: Initialize Grid cells to a predetermined pattern.
            // No parameter.
            // Register: air0
            //
0467/0000   srInitGrid, 0
0470/7300     cla cll
0471/1166     tad gSeed // Load random seed global value into AC.
0472/7450     sna // Skip if non-zero AC.
0473/5277       jmp IGFixedPattern // Else, zero means use fixed pattern.
0474/4543     jms i SetRand // Set the value as the pseudo-random seed.
0475/4553     jms i RandomizeGrid // Use the random pattern generator.
0476/5667     jmp i srInitGrid // And return.  
0477/1321   IGFixedPattern, tad szIGPattern // Load pattern preceding address.
0500/3010     dca air0 // And save in auto-indexing register.
0501/1033     tad cNumCols // Load # columns,
0502/3310     dca IGMultiplier // And save as multiplier parameter.
0503/1410   IGLoop, tad i air0 // Get next row offset (1-based).
0504/7450     sna // Skip if non-zero.
0505/5315       jmp IGFinish // Else, finish up if AC = 0.
0506/1030     tad cMinusOne // Subtract 1 to make it 0-based.
0507/4545     jms i EmuMUY // Multiply by column count.
0510/0000   IGMultipler, 0 // Self-modified parameter value.
0511/1410     tad i air0 // Add in column offset (1-based).
0512/1126     tad pGridCells // Add in grid base preceding address.
0513/4561     jms i CellBorn // Process new cell birth.
0514/5303     jmp IGLoop // And loop to next cell pattern.
0515/4564   IGFinish, jms i ProcWrap // Process wrap row neighbor counts.
0516/4551     jms i ClrWrap // Clear wrap rows for next iteration.
0517/5667     jmp i srInitGrid // Return.
0520/0000   IGCurrAddr, 0
0521/0521   szIGPattern, . // Null-terminated row/col offset list.
0522/0001     1;2 // Glider
0523/0002
0524/0002     2;3
0525/0003
0526/0003     3;1;3;2;3;3
0527/0001
0530/0003
0531/0002
0532/0003
0533/0003
0534/0000     0 // Null-terminator.
            //
            // Subroutine: Randomize Grid cells.
            // No parameter.
            //
0535/0000   srRandomizeGrid, 0
0536/7300     cla cll
0537/1126     tad pGridCells
0540/3365     dca RGCurrCell
0541/1126     tad pGridCells
0542/1034     tad cNumCells  // Compute last cell pointer for grid.
0543/3366     dca RGLastCell
0544/4544   RGLoop, jms i GetRand // Get a random integer.
0545/0026     and mRandBits  // Only keep 6 bits (0 to n-1).
0546/7001     iac // Add 1 (1 to n).
0547/1365     tad RGCurrCell  // Add random offset to cell pointer.
0550/3365     dca RGCurrCell
0551/1365     tad RGCurrCell // Reload and negate current cell pointer.
0552/7041     cia
0553/1366     tad RGLastCell // Subtract from last cell pointer.
0554/7510     spa // Skip if AC >= 0
0555/5362       jmp RGFinish // Else, finish up if negative.
0556/7300     cla cll
0557/1365     tad RGCurrCell // Load address of current cell into AC.
0560/4561     jms i CellBorn // Process new cell birth.
0561/5344     jmp RGLoop
0562/4564   RGFinish, jms i ProcWrap // Process wrap row neighbor counts.
0563/4551     jms i ClrWrap // Clear wrap rows for next iteration.
0564/5735     jmp i srRandomizeGrid // Return.
0565/0000   RGCurrCell, 0
0566/0000   RGLastCell, 0
            //
            *0600
            //
            // Subroutine: Show Grid cells.
            // No parameter.
            // Registers: air0
            //
0600/0000   srShowGrid, 0
0601/7300     cla cll
0602/1126     tad pGridCells // Load address of grid array.
0603/3010     dca air0 // Store pointer in auto-index register.
0604/1033     tad cNumCols
0605/7041     cia
0606/3242     dca SGMColCount // Store minus rows per cell count.
0607/1242     tad SGMColCount
0610/3243     dca SGColCount // Copy to actual column cell loop counter.
0611/1034     tad cNumCells
0612/7041     cia
0613/3241     dca SGLoopCount // Store negative cell count.
0614/7300   SGLoop, cla cll
0615/1410     tad i air0 // Loop thru each grid cell.
0616/0021     and mCellOnLo // Mask just "on" bit in lo half (current state).
0617/7440     sza // Skip if zero (treat as dead).
0620/5223       jmp SGLive // Else treat as live.
0621/1107   SGDead, tad charSpace
0622/5225     jmp SGPutChar
0623/7300   SGLive, cla cll
0624/1111     tad charStar
0625/4537   SGPutChar, jms i PutChar // Display space or star based on cell status.
0626/2241     isz SGLoopCount // See if we have processed all grid cells.
0627/5232       jmp SGRowCheck // If not, check if we've reached the end of a row.
0630/4541     jms i PutNewLine
0631/5600     jmp i srShowGrid // Return.
0632/2243   SGRowCheck, isz SGColCount // Increment columns-per-row counter
0633/5214       jmp SGLoop // Loop to next cell if non-zero.
0634/4541     jms i PutNewLine
0635/7300     cla cll
0636/1242     tad SGMColCount // Reset col-per-row counter.
0637/3243     dca SGColCount
0640/5214     jmp SGLoop // Then loop to next cell.
0641/0000   SGLoopCount, 0
0642/0000   SGMColCount, 0
0643/0000   SGColCount, 0
            //
            // Subroutine: Process Generation iteration.
            // No parameter.
            //
0644/0000   srProcessGeneration, 0
0645/2165     isz gGeneration // Increment generation # (Never will be zero, so will neve
0646/4550     jms i ShowSeedAndGeneration
0647/7300     cla cll
0650/1126     tad pGridCells
0651/3320     dca PGCurrAddr // Initialize current cell address.
0652/1034     tad cNumCells // Setup counter for processing each grid cell.
0653/7041     cia // Negate.
0654/3321     dca PGLoopCount
0655/2320   PGCellLoop, isz PGCurrAddr // Increment current grid cell address. (Will neve
0656/7300     cla cll
0657/1720     tad i PGCurrAddr // Load cell state into AC.
0660/7450     sna // Skip if AC non-zero.
0661/5313       jmp PGCheckLoop // Else, loop to next cell if current one is empty (also 
0662/0020     and mNbrCount // Mask to check living neighbor count.
0663/3322     dca PGNbrCount // Save in local variable.
0664/1720     tad i PGCurrAddr // Re-load current cell state.
0665/0021     and mCellOnLo // Mask to check only current state "live" bit.
0666/7450     sna // Skip if AC non-zero (cell is "live").
0667/5301       jmp PGIsDead // Else process "dead" cell.
0670/7300   PGIsLive, cla cll
0671/1322     tad PGNbrCount // Get neighbor count.
0672/1031     tad cMinusTwo // Subtract 2.
0673/7510     spa // Skip if >= 0 (count >= 2).
0674/5310       jmp PGDied // Else cell just died due to under-population.
0675/1030     tad cMinusOne // Subtract 1 (Now at original count - 3).
0676/7540     sma sza // Skip if <= 0 (count <= 3).
0677/5310       jmp PGDied // Else cell just died due to overcrowding.
0700/5313     jmp PGCheckLoop // Otherwise, cell stays alive so process next cell.
0701/1322   PGIsDead, tad PGNbrCount // Get neighbor count.  (AC was already zero).
0702/1032     tad cMinusThree // Subtract 3.
0703/7440     sza // Skip if = 0 (count = 3).
0704/5313       jmp PGCheckLoop // Else cell stays dead so process next cell.
0705/1320   PGBorn, tad PGCurrAddr // Load address of current cell. (AC was already zero.
0706/4561     jms i CellBorn // Create new cell.
0707/5313     jmp PGCheckLoop // Process next cell.
0710/7300   PGDied, cla cll
0711/1320     tad PGCurrAddr // Load address of current cell.
0712/4562     jms i CellDied // Kill cell, then process next cell.
0713/2321   PGCheckLoop, isz PGLoopCount
0714/5255       jmp PGCellLoop // Continue looping if non-zero. 
0715/4564   PGFinish, jms i ProcWrap // Process wrapped neighbor counts.
0716/4551     jms i ClrWrap // Clear wrapped counts for next iteration.  
0717/5644     jmp i srProcessGeneration // Return
0720/0000   PGCurrAddr, 0
0721/0000   PGLoopCount, 0
0722/0000   PGNbrCount, 0  
            //
            // Subroutine: Cell Born.
            // Parameter: AC contains address of cell.
            //
0723/0000   srCellBorn, 0
0724/3336     dca CBCellAddr
0725/1736     tad i CBCellAddr // Load current cell state.
0726/7421     mql // Move to MQ register and clear AC.
0727/1022     tad mCellOnHi // Load mask to turn on "live" bit in hi half word.
0730/7501     mqa // "Or" in current cell state.
0731/3736     dca i CBCellAddr // And store back in cell grid position.
0732/1336     tad CBCellAddr // Reload grid cell address.
0733/4563     jms i CellNeighbors // Increment cell neighbor counts
0734/0100       incrNbrCount
0735/5723     jmp i srCellBorn // Return when done.
0736/0000   CBCellAddr, 0
            //
            // Subroutine: Cell Died.
            // Parameter: AC contains address of cell.
            // Registers: air7
            //
0737/0000   srCellDied, 0
0740/3350     dca CDCellAddr
0741/1750     tad i CDCellAddr // Load current cell state.
0742/0023     and mCellOffHi // Clear "live" bit in hi half word.
0743/3750     dca i CDCellAddr // And store back in cell grid position.
0744/1350     tad CDCellAddr // Reload grid cell address.
0745/4563     jms i CellNeighbors // Increment cell neighbor counts
0746/7700       decrNbrCount
0747/5737     jmp i srCellDied // Return when done.
0750/0000   CDCellAddr, 0
            //
            // Subroutine: Cell Neighbor count update.
            // Parameter: AC contains address of cell, word after call contains increment
            // Registers: air7
            //
0751/0000   srCellNeighbors, 0
0752/3371     dca CNCellAddr
0753/1751     tad i srCellNeighbors // Load increment or decrement.
0754/3373     dca CNIncrDecr
0755/2351     isz srCellNeighbors // Prepare for skip-return.
0756/1112     tad cellOffsets // Load index register with address before neighbor cell of
0757/3017     dca air7
0760/1417   CNLoop, tad i air7 // Load offset to a neighbor cell.
0761/7450     sna // Skip if non-zero
0762/5751       jmp i srCellNeighbors // Else, return if offset was zero.
0763/1371     tad CNCellAddr // Load address of current cell.
0764/3372     dca CNNbrAddr // And save as neighbor cell address.
0765/1772     tad i CNNbrAddr // Load neighbor cell current state.
0766/1373     tad CNIncrDecr // And increment or decrement that cell's neighbor count (hi
0767/3772     dca i CNNbrAddr // And store back to grid cell.
0770/5360     jmp CNLoop
0771/0000   CNCellAddr, 0
0772/0000   CNNbrAddr, 0
0773/0000   CNIncrDecr, 0
            //
            *1000
            //
            // Subroutine: Process Wrap row and cell neighbor counts against intended cel
            // No parameter.
            // Registers: air1 air2
            //  
1000/0000   srProcWrap, 0
1001/7300     cla cll
1002/1524     tad i pNWWrapCell // Load corner wrap cell.
1003/0025     and mHiHalf // Mask to only keep hi half.
1004/1531     tad i pNWPairCell // Add in grid pair cell state.
1005/3531     dca i pNWPairCell // And save back to grid.
1006/1530     tad i pSEWrapCell // Repeat for other corner wrap/pair.
1007/0025     and mHiHalf
1010/1534     tad i pSEPairCell
1011/3534     dca i pSEPairCell
1012/1125     tad pTopWrapRow // Load address of top wrap row.
1013/3011     dca air1 // Set 1st index register to loop thru top wrap row.
1014/1127     tad pBotWrapRow // Load address of bottom wrap row.
1015/3012     dca air2 // Set 2nd index register to loop thru bottom wrap row.
1016/1132     tad pTopPairRow // Load address of top pair row.
1017/3243     dca PWTopAddr // Save in local variable.
1020/1133     tad pBotPairRow // Load address of bottom pair row.
1021/3244     dca PWBotAddr // Save in local variable.
1022/1033     tad cNumCols // Setup counter for clearing top and bottom wrap rows.
1023/7041     cia // Negate.
1024/3242     dca PWLoopCount
1025/1411   PWWrapLoop, tad i air1 // Load wrapped top row neighbor count.
1026/0025     and mHiHalf // Mask to only keep hi half.
1027/2243     isz PWTopAddr // Increment top pair row cell address (will never skip).
1030/1643     tad i PWTopAddr // Add in top pair row cell state
1031/3643     dca i PWTopAddr // Store result back to grid cell.
1032/1412     tad i air2 // Load wrapped bottom row neighbor count.
1033/0025     and mHiHalf // Mask to only keep hi half.
1034/2244     isz PWBotAddr // Increment bottom pair row cell address (will never skip).
1035/1644     tad i PWBotAddr // Add in bottom pair row cell state.
1036/3644     dca i PWBotAddr // Store result back to grid cell.
1037/2242     isz PWLoopCount // Increment loop counter.
1040/5225       jmp PWWrapLoop // Non-zero counter, keep looping.
1041/5600     jmp i srProcWrap // Done looping, so return.
1042/0000   PWLoopCount, 0
1043/0000   PWTopAddr, 0
1044/0000   PWBotAddr, 0
            //
            // Subroutine: Clone Grid Cells from prior iteration state to current.
            // Parameters: None.
            // Registers: air1, air2
            //
1045/0000   srCloneGrid, 0
1046/7300     cla cll
1047/1126     tad pGridCells // Load address of grid array.
1050/3011     dca air1 // Store pointer in 1st auto-index register.
1051/1011     tad air1 // Copy to 2nd index register.
1052/3012     dca air2
1053/1034     tad cNumCells
1054/7041     cia
1055/3265     dca CGCLoopCount // Store negative cell count.
1056/1411   CGCLoop, tad i air1 // Loop thru each grid cell.
1057/7440     sza // Skip if zero.
1060/4560       jms i CloneCell // Copy hi half (prior state) to lo half (current state).
1061/3412     dca i air2 // Store cloned result back to grid cell.
1062/2265     isz CGCLoopCount // See if we have processed all grid cells.
1063/5256       jmp CGCLoop // If not, keep looping.
1064/5645     jmp i srCloneGrid // Return.
1065/0000   CGCLoopCount, 0
            //
            // Subroutine: Clone Cell State from prior iteration state to current.
            // Clone the left-half of the AC into the right-half.
            // Parameter: AC contains the cell contents to be cloned from the left (hi) h
            // Returns: Cloned result in AC.
            //
1066/0000   srCloneCell, 0
1067/0025     and mHiHalf // Mask to keep only left-half of AC
1070/7421     mql // Move AC to MQ and clear AC.
1071/7501     mqa // Copy MQ back to AC.
1072/7012     rtr // Rotate AC twice right.
1073/7012     rtr // 2 more bits.
1074/7012     rtr // Total of 6 bits rotation.
1075/7501     mqa // OR in original high-half.
1076/5666     jmp i srCloneCell // Return.
            //
            // Utility Subroutines.
            //
            *1200
            //
            // Subroutine: Skip If Character ready.
            // Check for keyboard character. 
            // Skip-return if present, returning the character in the AC. 
            // Else just return.
            // 
1200/0000   srSkipIfChar, 0
1201/6031     ksf // Is Keyboard Flag Raised?
1202/5600       jmp i srSkipIfChar // No, just return.
1203/6036     krb // Yes - Read Character to AC.
1204/2200     isz srSkipIfChar // Increment return address.
1205/5600     jmp i srSkipIfChar // Return to "skip" address.
            //
            // Read a keyboard character.  Wait until one appears.
            //
1206/0000   srGetChar, 0
1207/6031     ksf // Is Keyboard Flag Raised?
1210/5207       jmp .-1 // No - Loop! (Wait Loop)
1211/6036     krb // Yes - Read Character to AC.
1212/5606     jmp i srGetChar // Return.
            //
            // Subroutine: Put Character to display.
            // Parameter: AC contains character.
            //
1213/0000   srPutChar, 0
1214/6041     tsf // Is Printer Ready?
1215/5214       jmp .-1 // No - Loop! (Wait Loop)
1216/6046     tls // Yes - Print the character!
1217/7300     cla cll // Clear AC and Link
1220/5613     jmp i srPutChar // Return
            //
            // Subroutine: Put String to terminal.
            // Display a null-terminated string.
            // Parameter: AC contains address of word preceding null-terminated string to
            // Registers: air6
            //
1221/0000   srPutString, 0
1222/3016     dca air6 // Deposit address of string to auto-index register.
1223/1416     tad i air6 // Load character.
1224/7450     sna // Is it a null? - skip if non-zero.
1225/5621       jmp i srPutString / Yes - return if zero.
1226/4213     jms srPutChar / No - display character (subroutines on same page).
1227/5223     jmp .-4 / Get next character.
            //
            // Subroutine: Put New Line to terminal (Carriage-Return/Line-Feed combinatio
            // Parameters: None.
            //
1230/0000   srPutNewLine, 0
1231/7300     cla cll
1232/1103     tad szNewLine
1233/4540     jms i PutString
1234/5630     jmp i srPutNewLine
            //
            // Subroutine: Put Octal value to terminal.
            // Display a 4-digit octal value.
            // Parameter: AC contains the value to display.
            //
1235/0000   srPutOctal, 0
1236/7421     mql // Move AC to MQ and clear AC.
1237/7501     mqa // Copy MQ back to AC.
1240/0027     and mLoOctalDigit // Mask to keep only low octal digit.
1241/1110     tad charZero // Convert to display digit.
1242/3300     dca Octal0Digit
1243/7501     mqa // Copy MQ to AC.
1244/7012     rtr // Rotate right 2 bits.
1245/7010     rar // Rotate right 1 bit.
1246/7421     mql // Move AC to MQ and clear AC.
1247/7501     mqa // Copy MQ back to AC.
1250/0027     and mLoOctalDigit // Mask to keep only low octal digit.
1251/1110     tad charZero // Convert to display digit.
1252/3277     dca Octal1Digit
1253/7501     mqa // Copy MQ to AC.
1254/7012     rtr // Rotate right 2 bits.
1255/7010     rar // Rotate right 1 bit.
1256/7421     mql // Move AC to MQ and clear AC.
1257/7501     mqa // Copy MQ back to AC.
1260/0027     and mLoOctalDigit // Mask to keep only low octal digit.
1261/1110     tad charZero // Convert to display digit.
1262/3276     dca Octal2Digit
1263/7501     mqa // Copy MQ to AC.
1264/7012     rtr // Rotate right 2 bits.
1265/7010     rar // Rotate right 1 bit.
1266/0027     and mLoOctalDigit // Mask to keep only low octal digit.
1267/1110     tad charZero // Convert to display digit.
1270/3275     dca Octal3Digit
1271/1274     tad OctalDigits
1272/4540     jms i PutString
1273/5635     jmp i srPutOctal // Return.
1274/1274   OctalDigits, .  
1275/0000   Octal3Digit, 0
1276/0000   Octal2Digit, 0
1277/0000   Octal1Digit, 0
1300/0000   Octal0Digit, 0
1301/0000   OctalNullTerminator, 0
            //
            //---------------------------------------------------------------------------
            //
            // The following srroutines are courtesy of:
            // https://www.grc.com/pdp-8/deepthought-sbc.htm
            //
            // Subroutine: Set Random number seed.
            // Parameter: AC contains seed value.
            //
1302/0000   srSetRand, 0
1303/3316     dca LastRand
1304/5702     jmp i srSetRand // Return.
            //
            // Subroutine: Get Random number.
            //   This is the simplest way I know of to generate highly random
            //   looking 12-bit values.  It's a Linear Congruential Pseudo Random
            //   Number Generator (LCPRNG).  Each time it's called, it evaluates
            //   the expression:  NextRand = LastRand * 5545 + 541 (all octal)           
            // No parameters.
            // Returns: Random number in AC.
            //
1305/0000   srGetRand,      0
1306/7300                   CLA CLL
1307/1316                   TAD     LastRand        // get the last PRNG value
1310/4545                   JMS  I  EmuMUY          // multiply by the following constant
1311/5545                     5545                  // 2917 base 10 - LCPRNG multiplicand
1312/1317                   TAD     cRandAdd        // sum in our LCPRNG addend
1313/3316                   DCA     LastRand        // save this for next time
1314/1360                   TAD     AccumHigh       // return the HIGH 12-bits as our res
1315/5705                   JMP  I  srGetRand       // return the AC to the caller
1316/0000   LastRand,       0                       // our previous random value
1317/0541   cRandAdd,       541                     // 353 base 10
            //
            // Subroutine: Emulate Multiply instruction.
            //   This is a full 12x12 multiply, needed because the emulated PDP-8
            //   lacks the EAE "Extended Arithmetic Element" multiplier.
            // Parameters:
            //   AC contains Multiplier.
            //   The word after the call has Multiplicand.
            // Returns:
            //   Least significant 12-bits in AC.
            //   Most significant 12-bits in AccumHigh.
            //
1320/0000   srEmuMUY,       0                      
1321/3361                   DCA     Multiplier      // save the multiplier for shifting  
1322/1355                   TAD     cMinus12        // setup our -12 loop counter
1323/3356                   DCA     PhaseCount
1324/3357                   DCA     AccumLow        // clear our 24-bit results accumulat
1325/3360                   DCA     AccumHigh       
1326/1361   MultShift,      TAD     Multiplier      // get a bit from the multiplier
1327/7104                   CLL RAL                 // move the high-bit into LINK
1330/3361                   DCA     Multiplier      // put the updated multiplier back
1331/7420                   SNL                     // we do need to add-in the multiplic
1332/5340                   JMP     MultIterate     // no multiplicand add-in
1333/1720                   TAD  I  srEmuMUY        // add the multiplicand into accumula
1334/1357                   TAD     AccumLow        // this *may* overflow, clearing the 
1335/3357                   DCA     AccumLow        // either way, put the updated low 12
1336/7420                   SNL                     // if LINK is still '1', no overflow
1337/2360                   ISZ     AccumHigh       // bump the high-half if we carried o
1340/2356   MultIterate,    ISZ     PhaseCount      // see whether we've done all 12 bits
1341/5346                   JMP     Shift24         // not done, so shift and iterate aga
1342/7300                   CLL CLA                 // return the lower 12-bits in AC
1343/1357                   TAD     AccumLow
1344/2320                   ISZ     srEmuMUY        // return to the instruction after mu
1345/5720                   JMP  I  srEmuMUY
1346/1357   Shift24,        TAD     AccumLow        // get the lower 12-bit half
1347/7104                   CLL RAL                 // shift it left, high bit into LINK
1350/3357                   DCA     AccumLow        // put back the new low half
1351/1360                   TAD     AccumHigh       // get the upper 12-bit half
1352/7004                   RAL                     // shift it left, LINK into low bit
1353/3360                   DCA     AccumHigh       // put back the new high half
1354/5326                   JMP     MultShift
1355/7764   cMinus12,       7764
1356/0000   PhaseCount,     0                       // our multiplier-shift counter
1357/0000   AccumLow,       0                       // low 12-bits of 12x12 mult
1360/0000   AccumHigh,      0                       // high 12-bits of 12x12 mult
1361/0000   Multiplier,     0                       // temp used by multiplication
            //        
            //---------------------------------------------------------------------------
            //
            // Cell Array Pages.
            //
            *2007 //*2000
2007/0000   NWWrapCell, 0 // Extra "northwest" wrap cell.
2010/0000   CellBuffer, 0 // Array of top wrap row, cell grid, bottom wrap row, and "sout
            //
            ///
            $Main
$0200

User Defined Symbol Table

numRows 0017
numCols 0115
numCells2203
numColP10116
numColM10114
numCellM2202
incrNbrC0100
decrNbrC7700
asciiEsc0033
asciiSpa0040
asciiCR 0015
asciiLF 0012
air0    0010
air1    0011
air2    0012
air3    0013
air4    0014
air5    0015
air6    0016
air7    0017
mNbrCoun0020
mCellOnL0021
mCellOnH0022
mCellOff0023
mLoHalf 0024
mHiHalf 0025
mRandBit0026
mLoOctal0027
cMinusOn0030
cMinusTw0031
cMinusTh0032
cNumCols0033
cNumCell0034
szClrScr0035
szCrsrHo0043
szSeed  0053
szGenera0063
szNewLin0103
charSpac0107
charZero0110
charStar0111
cellOffs0112
coNW    0113
coN     0114
coNE    0115
coE     0116
coSE    0117
coS     0120
coSW    0121
coW     0122
coSelf  0123
pNWWrapC0124
pTopWrap0125
pGridCel0126
pBotWrap0127
pSEWrapC0130
pNWPairC0131
pTopPair0132
pBotPair0133
pSEPairC0134
SkipIfCh0135
GetChar 0136
PutChar 0137
PutStrin0140
PutNewLi0141
PutOctal0142
SetRand 0143
GetRand 0144
EmuMUY  0145
ClrGener0146
LoadSeed0147
ShowSeed0150
ClrWrap 0151
ClrGrid 0152
Randomiz0153
InitGrid0154
ShowGrid0155
ProcessG0156
CloneGri0157
CloneCel0160
CellBorn0161
CellDied0162
CellNeig0163
ProcWrap0164
gGenerat0165
gSeed   0166
Main    0200
MainLoop0212
MainPaus0217
End     0221
srLoadSe0400
srClrGen0405
srShowSe0413
srClrWra0433
CWWrapLo0446
CWLoopCo0453
srClrGri0454
CGGridLo0462
CGLoopCo0466
srInitGr0467
IGFixedP0477
IGLoop  0503
IGMultip0510
IGFinish0515
IGCurrAd0520
szIGPatt0521
srRandom0535
RGLoop  0544
RGFinish0562
RGCurrCe0565
RGLastCe0566
srShowGr0600
SGLoop  0614
SGDead  0621
SGLive  0623
SGPutCha0625
SGRowChe0632
SGLoopCo0641
SGMColCo0642
SGColCou0643
srProces0644
PGCellLo0655
PGIsLive0670
PGIsDead0701
PGBorn  0705
PGDied  0710
PGCheckL0713
PGFinish0715
PGCurrAd0720
PGLoopCo0721
PGNbrCou0722
srCellBo0723
CBCellAd0736
srCellDi0737
CDCellAd0750
srCellNe0751
CNLoop  0760
CNCellAd0771
CNNbrAdd0772
CNIncrDe0773
srProcWr1000
PWWrapLo1025
PWLoopCo1042
PWTopAdd1043
PWBotAdd1044
srCloneG1045
CGCLoop 1056
CGCLoopC1065
srCloneC1066
srSkipIf1200
srGetCha1206
srPutCha1213
srPutStr1221
srPutNew1230
srPutOct1235
OctalDig1274
Octal3Di1275
Octal2Di1276
Octal1Di1277
Octal0Di1300
OctalNul1301
srSetRan1302
srGetRan1305
LastRand1316
cRandAdd1317
srEmuMUY1320
MultShif1326
MultIter1340
Shift24 1346
cMinus121355
PhaseCou1356
AccumLow1357
AccumHig1360
Multipli1361
NWWrapCe2007
CellBuff2010
